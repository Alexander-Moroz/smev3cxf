package ru.voskhod.smev.message_exchange_service_client;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import ru.voskhod.smev.message_exchange.autogenerated.bp_metadata.v1_0.CaseInfoType;
import ru.voskhod.smev.message_exchange.autogenerated.bp_metadata.v1_0.ObjectFactory;
import ru.voskhod.smev.message_exchange.autogenerated.bp_metadata.v1_0.ServiceOrFunctionType;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.transform.dom.DOMResult;
import java.util.ArrayList;
import java.util.List;

public final class BusinessProcessMetadataBuilder {

    private static final ThreadLocal<Marshaller> jaxbMarshaller = new ThreadLocal<Marshaller>() {
        @Override
        protected Marshaller initialValue() {
            try {
                return JAXBContext.newInstance("ru.voskhod.smev.message_exchange.autogenerated.bp_metadata.v1_0").createMarshaller();
            } catch (JAXBException e) {
                throw new RuntimeException(e);
            }
        }
    };

    private String caseNumber;
    private String serviceOrFunctionCode;
    private boolean service;
    private String frgu;

    public BusinessProcessMetadataBuilder() {
        reset();
    }

    /**
     * Установить номер канцелярского дела, в ходе обработки которого посылается запрос или заявка.
     *
     * @param caseNumber номер дела.
     */
    public void setCaseNumber(String caseNumber) {
        this.caseNumber = caseNumber;
    }

    /**
     * Установить код госуслуги или госфункции, в ходе предоставления (выполнения) которой посылается запрос или заявка.
     * Согласно реестру госуслуг.
     *
     * @param serviceOrFunctionCode код госуслуги или госфункции.
     */
    public void setServiceOrFunctionCode(String serviceOrFunctionCode) {
        this.serviceOrFunctionCode = serviceOrFunctionCode;
    }

    /**
     * Установить признак - запрос отаравляется в ходе предоставления госуслуги, или выполнения госфункции.
     *
     * @param service true - госуслуга, false - госфункция.
     */
    public void setService(boolean service) {
        this.service = service;
    }

    /**
     * Установить мнемонику участника взаимодействия ФРГУ
     *
     * @param frgu мнемоника участника взаимодействия ФРГУ
     */
    public void setFrgu(String frgu) {
        this.frgu = frgu;
    }

    public String getCaseNumber() {
        return caseNumber;
    }

    public String getServiceOrFunctionCode() {
        return serviceOrFunctionCode;
    }

    public boolean isService() {
        return service;
    }

    public String getFrgu() {
        return frgu;
    }

    private static <T> Element unmarshal(JAXBElement<T> element) throws JAXBException {
        DOMResult domResult = new DOMResult();
        jaxbMarshaller.get().marshal(element, domResult);
        return ((Document) domResult.getNode()).getDocumentElement();
    }

    /**
     * Получить результат в виде DOM-фрагмента.
     *
     * @return
     * @throws JAXBException
     */
    public List<Element> getResult() throws JAXBException {
        List<Element> result = new ArrayList<>();
        ObjectFactory factory = new ObjectFactory();
        if (caseNumber != null || serviceOrFunctionCode != null) {
            CaseInfoType caseInfo = new CaseInfoType();
            caseInfo.setCaseNumber(caseNumber);
            if (serviceOrFunctionCode != null) {
                caseInfo.setServiceOrFunctionCode(serviceOrFunctionCode);
                if (service) {
                    caseInfo.setServiceOrFunction(ServiceOrFunctionType.SERVICE);
                } else {
                    caseInfo.setServiceOrFunction(ServiceOrFunctionType.FUNCTION);
                }
            }
            result.add(unmarshal(factory.createCaseInfo(caseInfo)));
        }
        if (frgu != null) {
            result.add(unmarshal(factory.createFrgu(frgu)));
        }
        if (result.isEmpty())
            return null;
        return result;
    }

    /**
     * Подготовить builder к повторному использованию.
     */
    public void reset() {
        caseNumber = null;
        serviceOrFunctionCode = null;
        service = true;
        frgu = null;
    }
}
