package ru.voskhod.smev.message_exchange_service_client.impl;

import it.sauronsoftware.ftp4j.*;
import ru.voskhod.smev.message_exchange.autogenerated.types.basic.v1_1.FSAuthInfo;
import ru.voskhod.smev.message_exchange.autogenerated.types.basic.v1_1.RefAttachmentHeaderType;
import ru.voskhod.smev.message_exchange_service_client.ClientSideProcessingException;
import ru.voskhod.smev.message_exchange_service_client.OutAttachment;

import java.io.IOException;
import java.io.OutputStream;

public final class LargeOutAttachment implements OutAttachment {

    private final String ftpAddress;
    private final RefAttachmentHeaderType header;
    private final FSAuthInfo info;

    public LargeOutAttachment(String ftpAddress, RefAttachmentHeaderType header, FSAuthInfo info) {
        this.ftpAddress = ftpAddress;
        this.header = header;
        this.info = info;
    }

    public String getName() {
        return info.getFileName();
    }

    public String getMimeType() {
        return header == null ? null : header.getMimeType();
    }

    public byte[] getSignature() {
        return header == null ? null : header.getSignaturePKCS7();
    }

    public Content getContent() {
        return new LargeContent();
    }

    private final class LargeContent implements Content {

        private final FTPClient ftp = new FTPClient();

        public boolean retrieve(OutputStream output) throws IOException, ClientSideProcessingException {
            try {
                AttachmentBuilder.connect(ftp, ftpAddress);
                boolean ok = false;
                try {
                    ftp.login(info.getUserName(), info.getPassword());
                    ftp.download(info.getFileName(), output, 0, null);
                    ok = true;
                    return true;
                } finally {
                    ftp.disconnect(ok);
                }
            } catch (FTPAbortedException ex) {
                return false;
            } catch (FTPIllegalReplyException ex) {
                throw new ClientSideProcessingException(ex);
            } catch (FTPException ex) {
                throw new ClientSideProcessingException(ex);
            } catch (FTPDataTransferException ex) {
                throw new ClientSideProcessingException(ex);
            }
        }

        public void cancel() {
            if (ftp.isConnected()) {
                try {
                    ftp.abortCurrentDataTransfer(true);
                } catch (Exception ex) {
                    try {
                        ftp.abortCurrentDataTransfer(false);
                    } catch (Exception ex2) {
                        // ignore
                    }
                }
            } else {
                ftp.abortCurrentConnectionAttempt();
            }
        }
    }
}
