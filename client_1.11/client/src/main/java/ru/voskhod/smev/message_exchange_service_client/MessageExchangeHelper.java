package ru.voskhod.smev.message_exchange_service_client;

import com.fasterxml.uuid.EthernetAddress;
import com.fasterxml.uuid.UUIDTimer;
import com.fasterxml.uuid.impl.TimeBasedGenerator;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import ru.voskhod.smev.message_exchange.autogenerated.types.v1_1.GetRequestResponse;
import ru.voskhod.smev.message_exchange.autogenerated.types.v1_1.GetResponseResponse;
import ru.voskhod.smev.message_exchange.autogenerated.types.v1_1.GetStatusResponse;
import ru.voskhod.smev.message_exchange_service_client.datatypes.MessageTypeEnum;

import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.transform.dom.DOMResult;
import java.io.IOException;
import java.util.Date;
import java.util.Random;

public final class MessageExchangeHelper {

    private static final TimeBasedGenerator uuidGenerator;

    static {
        Random random = new Random(System.currentTimeMillis());
        UUIDTimer timer;
        try {
            timer = new UUIDTimer(random, null);
        } catch (IOException e) {
            // Will never be thrown.
            throw new RuntimeException(e);
        }
        EthernetAddress addr = EthernetAddress.fromInterface();

        uuidGenerator = new TimeBasedGenerator(addr, timer);
    }

    private MessageExchangeHelper() {
    }

    public static String generateUUID() {
        return uuidGenerator.generate().toString();
    }

    public static String getMessageSMEVId(GetRequestResponse requestResponse) {
        if (requestResponse.getRequestMessage() == null) {
            // Во входящей очереди нет сообщений, пришла только статистика о загрузке очереди.
            return null;
        }
        if (requestResponse.getRequestMessage().getRequest() != null) {
            return requestResponse.getRequestMessage().getRequest().getSenderProvidedRequestData().getMessageID();
        } else if (requestResponse.getRequestMessage().getCancel() != null) {
            return requestResponse.getRequestMessage().getCancel().getMessageID();
        } else {
            return null;
        }
    }

    public static MessageTypeEnum getMessageType(GetRequestResponse requestResponse) {
        if (requestResponse.getRequestMessage() == null) {
            // Во входящей очереди нет сообщений, пришла только статистика о загрузке очереди.
            return null;
        }
        if (requestResponse.getRequestMessage().getRequest() != null) {
            return MessageTypeEnum.REQUEST;
        } else if (requestResponse.getRequestMessage().getCancel() != null) {
            return MessageTypeEnum.CANCEL;
        } else {
            return null;
        }
    }
    
    public static Date getSendingTimestamp(GetRequestResponse requestResponse) {
        if (requestResponse.getRequestMessage() == null) {
            // Во входящей очереди нет сообщений, пришла только статистика о загрузке очереди.
            return null;
        }
        XMLGregorianCalendar cal;
        if (requestResponse.getRequestMessage().getRequest() != null) {
            cal = requestResponse.getRequestMessage().getRequest().getMessageMetadata().getSendingTimestamp();
        } else if (requestResponse.getRequestMessage().getCancel() != null) {
            cal = requestResponse.getRequestMessage().getCancel().getMessageMetadata().getSendingTimestamp();
        } else {
            return null;
        }
        
        return cal.toGregorianCalendar().getTime();
    }
    
    public static String getMessageSMEVId(GetResponseResponse responseResponse) {
        if (responseResponse.getResponseMessage() == null) {
            // Во входящей очереди нет сообщений, пришла только статистика о загрузке очереди.
            return null;
        }
        if (responseResponse.getResponseMessage().getResponse() != null) {
            return responseResponse.getResponseMessage().getResponse().getSenderProvidedResponseData().getMessageID();
        } else {
            return null;
        }
    }
    
    public static String getRequestMessageSMEVId(GetResponseResponse responseResponse) {
        if (responseResponse.getResponseMessage() == null) {
            // Во входящей очереди нет сообщений, пришла только статистика о загрузке очереди.
            return null;
        }
        if (responseResponse.getResponseMessage().getResponse() != null) {
            return responseResponse.getResponseMessage().getResponse().getOriginalMessageId();
        } else {
            return null;
        }
    }
    
    public static MessageTypeEnum getMessageType(GetResponseResponse responseResponse) {
        if (responseResponse.getResponseMessage() == null) {
            // Во входящей очереди нет сообщений, пришла только статистика о загрузке очереди.
            return null;
        }
        if (responseResponse.getResponseMessage().getResponse() != null) {
            return MessageTypeEnum.RESPONSE;
        } else {
            return null;
        }
    }
    
    public static Date getSendingTimestamp(GetResponseResponse responseResponse) {
        if (responseResponse.getResponseMessage() == null) {
            // Во входящей очереди нет сообщений, пришла только статистика о загрузке очереди.
            return null;
        }
        XMLGregorianCalendar cal;
        if (responseResponse.getResponseMessage().getResponse() != null) {
            cal = responseResponse.getResponseMessage().getResponse().getMessageMetadata().getSendingTimestamp();
        } else {
            return null;
        }
        
        return cal.toGregorianCalendar().getTime();
    }
    
    public static String getReturnAddress(GetRequestResponse requestResponse) {
        if (requestResponse.getRequestMessage() == null) {
            return null;
        }
        if (requestResponse.getRequestMessage().getRequest() == null) {
            return null;
        }
        return requestResponse.getRequestMessage().getRequest().getReplyTo();
    }
    
    public static Element getSenderSignature(GetRequestResponse requestResponse) {
        if (requestResponse.getRequestMessage() == null) {
            return null;
        }
        if (requestResponse.getRequestMessage().getRequest() != null) {
            return requestResponse.getRequestMessage().getRequest().getSenderInformationSystemSignature().getAny();
        } else if (requestResponse.getRequestMessage().getCancel() != null) {
            return requestResponse.getRequestMessage().getCancel().getSenderInformationSystemSignature().getAny();
        } else {
            return null;
        }
    }
    
    public static Element getSenderSignature(GetResponseResponse responseResponse) {
        if (responseResponse.getResponseMessage() == null) {
            return null;
        }
        return responseResponse.getResponseMessage().getResponse().getSenderInformationSystemSignature().getAny();
    }
    
    public static Element marshalContentSignedBySender(GetRequestResponse requestResponse) throws JAXBException {
        if (requestResponse.getRequestMessage() == null) {
            return null;
        }
        
        Marshaller jaxbMarshaller = MessageExchangeEndpoint.getJAXBMarshaller();
        DOMResult domResult = new DOMResult();
        
        if (requestResponse.getRequestMessage().getRequest() != null) {
            jaxbMarshaller.marshal(requestResponse.getRequestMessage().getRequest().getSenderProvidedRequestData(), domResult);
        } else if (requestResponse.getRequestMessage().getCancel() != null) {
            jaxbMarshaller.marshal(requestResponse.getRequestMessage().getCancel().getMessageReference(), domResult);
        } else {
            return null;
        }
        
        return ((Document) domResult.getNode()).getDocumentElement();
    }
    
    public static Element marshalContentSignedBySender(GetResponseResponse responseResponse) throws JAXBException {
        if (responseResponse.getResponseMessage() == null) {
            return null;
        }
        
        Marshaller jaxbMarshaller = MessageExchangeEndpoint.getJAXBMarshaller();
        DOMResult domResult = new DOMResult();
        
        if (responseResponse.getResponseMessage().getResponse() != null) {
            jaxbMarshaller.marshal(responseResponse.getResponseMessage().getResponse().getSenderProvidedResponseData(), domResult);
            return ((Document) domResult.getNode()).getDocumentElement();
        } else {
            return null;
        }
    }

    public static String getMessageSMEVId(GetStatusResponse statusResponse) {
        if (statusResponse.getSmevAsyncProcessingMessage() == null) {
            // Во входящей очереди нет сообщений
            return null;
        }
        if (statusResponse.getSmevAsyncProcessingMessage().getAsyncProcessingStatus() != null) {
            return statusResponse.getSmevAsyncProcessingMessage().getAsyncProcessingStatus().getOriginalMessageId();
        } else {
            return null;
        }
    }
}
